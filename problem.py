import sys
import os
import create_slideshow_from_slides, create_slides_from_photos from ahsan
##
## Function to calculate aggregated interest(final score) from output generated by our algo


# Input
# 4
# H 3 cat beach sun
# V 2 selfie smile
# V 2 garden selfie
# H 2 garden cat

class Photo():
    def __init__(self, orientation, no_of_tags, tags,):
        self.orientation = orientation
        self.no_of_tags = no_of_tags
        self.tags = tags

        
class Slideshow():
    def __init__(self, slides):         
        self.slides = slides # slides is an array

    def add_slide(self, slide):
        slides.append(slide)
    
    def calculateScore(self):
        finalScore = 0
        i = 0
        for i in range(len(self.slides)):
            finalScore = finalScore + (self.slides[i].calculate_interest((self.slides[i + 1])))
        return finalScore
    
    def write_file(self, filename):
        ''' 
        Writes the slideshow to file. 
  
        Parameters: 
            slideshow (list): contains list of slides. 
        '''
        # print self.slides
        with open('output/'+filename, 'w') as fd:
            fd.write(str(len(self.slides)) + '\n')
            for slide in self.slides:
                print slide.index
                slide = ' '.join([str(x) for x in slide.index])
                fd.write(slide + '\n')
    
        

class Slide():
    def __init__(self, tags, index):
        self.tags = tags # list of tags
        self.index = index # id is a list
    
    
    def calculate_interest(self, nextSlide):
        return min(self.get_common_tags(nextSlide), 
            self.getExtraTagsInThisSlide(nextSlide),
            self.getExtraTagsInNextSlide(nextSlide))

    def get_common_tags(self, nextSlide):
        '''
        Returns length
        '''
        return len(list(set(self.tags) & set(nextSlide.tags))) 

    def getExtraTagsInThisSlide(self, nextSlide):
        return len(list(set(self.tags) - set(nextSlide.tags)))

    def getExtraTagsInNextSlide(self, nextSlide):
        return len(list(set(nextSlide.tags) - set(self.tags)))

# def create_slideshow_from_slides(slides):
#     return Slideshow(slides)

# def create_slides_from_photos(photos):
#     slides = []
#     for i, photo in enumerate(photos):
#         if photo.orientation == 'H':
#             slide = Slide(photo.tags, [i])
#             slides.append(slide)
#     return slides 

def parse_input(line):
    return line[0], line[1], line[2:]

def read_file(filename):
    with open('files/'+filename) as fd:
        total = fd.readline()
        
        #index of the photo is the ID
        photos = []
        for i in range(0,int(total)):

            line = fd.readline()[:-1].split(' ')
            orientation, no_of_tags, tags = parse_input(line)
            photo = Photo(orientation, no_of_tags, tags)
            photos.append(photo)
    return photos
                                                                          

def main():
    if len(sys.argv) < 2:
        print 'Enter input_file name'
        sys.exit(1)
    photos = read_file(sys.argv[1]) # photo is an array of Photos
    slides = create_slides_from_photos(photos) # slides is array of slides (any order)
    slideshow = create_slideshow_from_slides(slides) # slideshow is array of slides (in specific order)
    slideshow.write_file(sys.argv[1])


if __name__ == "__main__":
    main()