import sys
import os
import random
# from dayem import create_slideshow_from_slides, create_slides_from_photos
##
# Function to calculate aggregated interest(final score) from output generated by our algo


# Input
# 4
# H 3 cat beach sun
# V 2 selfie smile
# V 2 garden selfie
# H 2 garden cat

class Photo():
    def __init__(self, orientation, no_of_tags, tags,):
        self.orientation = orientation
        self.no_of_tags = no_of_tags
        self.tags = tags

        
class Slideshow():
    def __init__(self, slides):         
        self.slides = slides # slides is an array

    def add_slide(self, slide):
        slides.append(slide)
    
    def calculateScore(self):
        finalScore = 0
        i = 0
        while i < (len(self.slides) - 1):
            finalScore = finalScore + (self.slides[i].calculate_interest((self.slides[i + 1])))
            i = i + 1
        return finalScore
    
    def calculateFitness(self, parent):
        finalScore = 0
        i = 0
        while i < (len(parent) - 1):
            finalScore = finalScore + (parent[i].calculate_interest((parent[i + 1])))
            i = i + 1
        return finalScore
    
    def spawnPopulation(self, parent, populationCount):
        newPopulation = []
        while len(newPopulation) < populationCount:
            tempPopulation = list(parent)
            indexA = random.randint(0,len(tempPopulation) - 1)
            indexB = random.randint(0,len(tempPopulation) - 1)
            tempPopulation[indexA], tempPopulation[indexB] = tempPopulation[indexB], tempPopulation[indexA]
            newPopulation.append(tempPopulation)
        return newPopulation

    def selectParent(self, population): 
        selectedParent = None
        maxScore = 0
        newScore = 0
        for parent in population:
            newScore = self.calculateFitness(parent)
            if newScore > maxScore:
                maxScore = newScore
                selectedParent = parent
        return selectedParent


    def sortSlides(self):
        total_generations = 100
        generation_count = 0 
        populationCount = 25
        population = self.spawnPopulation(self.slides, populationCount)
        parent = self.selectParent(population)
        while generation_count < total_generations:
            parent = self.selectParent(population)
            population = self.spawnPopulation(parent, populationCount)
            generation_count = generation_count + 1
            print("======================")
            print("Generation: " + str(generation_count) + " out of " + str(total_generations))
            print("Total Score: " + str(self.calculateFitness(parent)))
        
        self.slides = parent

        return self

    def write_file(self, filename):
        ''' 
        Writes the slideshow to file. 
  
        Parameters: 
            slideshow (list): contains list of slides. 
        '''
        # print self.slides
        with open('output/'+filename, 'w') as fd:
            fd.write(str(len(self.slides)) + '\n')
            for slide in self.slides:
                # print slide.index
                slide = ' '.join([str(x) for x in slide.index])
                fd.write(slide + '\n')
    
        

class Slide():
    def __init__(self, tags, index):
        self.tags = tags # list of tags
        self.index = index # id is a list
    
    
    def calculate_interest(self, nextSlide):
        return min(self.get_common_tags(nextSlide), 
            self.getExtraTagsInThisSlide(nextSlide),
            self.getExtraTagsInNextSlide(nextSlide))

    def get_common_tags(self, nextSlide):
        '''
        Returns length
        '''
        return len(list(set(self.tags) & set(nextSlide.tags))) 

    def getExtraTagsInThisSlide(self, nextSlide):
        return len(list(set(self.tags) - set(nextSlide.tags)))

    def getExtraTagsInNextSlide(self, nextSlide):
        return len(list(set(nextSlide.tags) - set(self.tags)))

def parse_input(line):
    return line[0], line[1], line[2:]

def read_file(filename):
    with open('files/'+filename) as fd:
        total = fd.readline()
        
        #index of the photo is the ID
        photos = []
        for i in range(0,int(total)):
            line = fd.readline()[:-1].split(' ')
            orientation, no_of_tags, tags = parse_input(line)
            photo = Photo(orientation, no_of_tags, tags)
            photos.append(photo)
    return photos
                                                                          

def main():
    if len(sys.argv) < 2:
        print 'Enter input_file name'
        sys.exit(1)
    photos = read_file(sys.argv[1]) # photo is an array of Photos
    slides = create_slides_from_photos(photos) # slides is array of slides (any order)
    slideshow = create_slideshow_from_slides(slides) # slideshow is array of slides (in specific order)
    slideshow.write_file(sys.argv[1])
    print ("Final Score: " + str(slideshow.calculateScore()))

def create_slideshow_from_slides(slides):
    slides.sort(key = lambda x: len(x.tags))
    return Slideshow(slides).sortSlides()

def merged_vertical(new_vertical, vertical_photos):
    if vertical_photos:
        for photo in vertical_photos:
            if len(photo['tags'].difference(new_vertical['tags'])) == 0:
                return True, photo
            else:
                return False, None
    return False, None
def force_merged(first, second):
    return [first['id']] + [second['id']] , list(first['tags'])+ list(second['tags'])

def create_slides_from_photos(photos):
    slides = []
    vertical_photos = []
    for i, photo in enumerate(photos):
        if photo.orientation == 'H':
            slide = Slide(photo.tags, [i])
            slides.append(slide)
        else:
            new_vertical = {"tags": set(photo.tags), "id": i}
            success, matched_photo = merged_vertical(new_vertical, vertical_photos)
            if success:
                index, tags = force_merged(matched_photo, new_vertical)
                slide = Slide(tags,index)
                slides.append(slide)
                vertical_photos.pop(matched_photo)
            else:
                vertical_photos.append(new_vertical)
    while len(vertical_photos) > 1:
        first_photo = vertical_photos.pop()
        second_photo = vertical_photos.pop()
        index, tags = force_merged(first_photo,second_photo)
        slide = Slide(tags,index)
        slides.append(slide)
        
    print "Total Slides: ",len(slides)
    return slides 

if __name__ == "__main__":
    main()


